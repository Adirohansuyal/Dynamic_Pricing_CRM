Hereâ€™s a detailed Agentic AI prompt that includes your Dynamic Pricing CRM requirements while using a database:


---

ðŸ”¹ Agentic AI Prompt: Dynamic Pricing CRM (with Database)

Project Overview

I want to build a Dynamic Pricing CRM that helps a shopkeeper track competitor prices and adjust product prices automatically. The system should have a Flask backend, a React.js frontend, and a database (MySQL/PostgreSQL) for storing product and competitor pricing data.

ðŸ”¹ Key Features Required:

âœ… Product Management:

The system should store product details (name, current price, category, etc.).

The shopkeeper should be able to manually update product prices via the CRM.


âœ… Competitor Price Scraping:

The system should scrape competitor prices from a sample competitor website.

The scraped competitor prices should be stored in the database.

Scraping should run automatically every 6 hours (using Celery & Redis).


âœ… Dynamic Pricing Algorithm:

The system should calculate a suggested price based on competitor pricing.

Example pricing strategy: Always keep my price 5% lower than the competitor.

The shopkeeper should be able to toggle auto-pricing ON/OFF from the frontend.


âœ… Frontend (React.js Dashboard):

A dashboard should display:

Product Name

My Price

Competitor Price

Suggested Price (if auto-pricing is ON)


The shopkeeper should be able to edit prices manually.


âœ… Backend (Flask & MySQL/PostgreSQL):

Provide REST APIs to:

Fetch all products & competitor prices.

Update product prices.

Trigger manual price scraping.



âœ… Automation & Scheduling:

Use Celery & Redis to scrape competitor prices every 6 hours automatically.


âœ… Deployment:

Deploy backend (Flask) on Render.

Deploy frontend (React.js) on Vercel.

Use Planetscale (MySQL) or Railway (PostgreSQL) for the database.



---

ðŸ”¹ How the AI Agent Should Work:

Step 1: Set up the Flask backend with REST APIs.

Step 2: Integrate MySQL/PostgreSQL for storing product & competitor prices.

Step 3: Implement a web scraper to extract competitor prices.

Step 4: Schedule the scraper to run every 6 hours using Celery.

Step 5: Build a React.js dashboard to display & update prices.

Step 6: Implement an auto-pricing algorithm based on competitor data.

Step 7: Deploy the entire system (backend, frontend, and database).



---

ðŸ”¹ Expected Deliverables:

Full source code (backend + frontend + database schema).

Setup & deployment guide.

APIs documented in Postman or Swagger.



---

This prompt will guide an AI agent to build a fully functional Dynamic Pricing CRM with a database and automation.

Do you want any modifications before using it?